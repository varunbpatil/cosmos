version: "3.7"
x-golang-daemon: &golang-daemon
  image: varunpatil/cosmos:0.1.7
  depends_on:
    - postgresql
    - temporal
  environment:
    WAIT_HOSTS: postgresql:5432, temporal:7233
    WAIT_TIMEOUT: 120
    WAIT_AFTER: 10
    ARTIFACT_DIR: ${ARTIFACT_DIR}
    SCRATCH_SPACE: ${SCRATCH_SPACE}
    LOCAL_DIR: ${LOCAL_DIR}
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ${ARTIFACT_DIR}:/tmp/cosmos/artifacts
    - ${SCRATCH_SPACE}:/tmp/cosmos/scratch
    - ${LOCAL_DIR}:/tmp/cosmos/local
  restart: unless-stopped
services:
  postgresql:
    container_name: cosmos-postgresql
    environment:
      POSTGRES_PASSWORD: password
    image: postgres:13
    command: -c wal_level=logical -c max_replication_slots=1
    networks:
      - cosmos-network
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
  temporal:
    container_name: cosmos-temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=password
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    image: temporalio/auto-setup:1.10.5
    networks:
      - cosmos-network
    ports:
      - 7233:7233
    restart: unless-stopped
  cosmos:
    container_name: cosmos
    <<: *golang-daemon
    command: sh -c '/wait && /cosmosd'
    networks:
      - cosmos-network
    ports:
      - 5000:5000
  cosmos-worker:
    container_name: cosmos-temporal-worker
    <<: *golang-daemon
    command: sh -c '/wait && /temporald'
    networks:
      - cosmos-network
  supabase-realtime:
    container_name: supabase-realtime-server
    image: supabase/realtime
    environment:
      - DB_HOST=postgresql
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_PORT=5432
      - SECURE_CHANNELS=false
      - PORT=4000
    depends_on:
      - cosmos
      - postgresql
    networks:
      - cosmos-network
    ports:
      - 4000:4000
    restart: unless-stopped
networks:
  cosmos-network:
volumes:
  postgres-data:
